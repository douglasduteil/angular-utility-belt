{"version":3,"file":"jumbotron/jumbotron.min.js","names":[],"mappings":"","sources":["jumbotron/jumbotron.js"],"sourcesContent":["'use strict';\n\n/**\n * @namespace bar.jumbotron\n */\n\nangular.module('bar.jumbotron', [])\n  .constant('barJumbotronConfig',\n  /**\n   * @ngdoc object\n   * @memberOf bar.jumbotron\n   * @name barJumbotronConfig\n   *\n   * @property {string} class - the class name\n   * @property {string} title - the title\n   * @property {string} templateUrl - the used template URL\n   */\n  {\n    class: 'jumbotron--bar',\n    title: 'Hello World',\n    templateUrl: 'jumbotron/jumbotron.tpl.html'\n  })\n  .directive('barJumbotron', barJumbotronDirective);\n\n\n/**\n * @ngInject\n *\n * @param {barJumbotronConfig} barJumbotronConfig\n */\nfunction barJumbotronDirective(barJumbotronConfig) {\n\n  var ATTR_OPTIONS_TO_COPY = ['title', 'class'];\n  var ATTR_PREFIX = 'barJumbotron';\n\n\n  /**\n   * @ngdoc directive\n   * @memberOf bar.jumbotron\n   * @name jumbotronDirective\n   * @restrict A\n   *\n   * @description\n   * The jumbotron directive. Have a sweet header.\n   *\n   * @param {string} [title='Hello World'] - The jumbotron title.\n   * @param {string} [class='jumbotron--bar'] - The jumbotron additional class.\n   *\n   */\n  return {\n    restrict: 'A',\n    templateUrl: barJumbotronConfig.templateUrl,\n    scope: true,\n    link: function postLink(scope, element, attr) {\n\n      var options = {};\n      angular.forEach(ATTR_OPTIONS_TO_COPY, function (key) {\n        var prefixedKey = ATTR_PREFIX + key[0].toUpperCase() + key.substr(1);\n        if (angular.isDefined(attr[prefixedKey])) options[key] = attr[prefixedKey];\n      });\n\n      scope.jumbotron = angular.extend({}, barJumbotronConfig, options);\n\n    }\n  };\n}\n\n\n"],"sourceRoot":"/source/"}